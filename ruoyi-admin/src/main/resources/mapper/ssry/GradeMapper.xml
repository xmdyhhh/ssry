<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.ssry.mapper.GradeMapper">

    <!-- 根据学生ID查询成绩列表 -->
    <select id="studentgradelist" resultType="com.ruoyi.ssry.domain.Grade">
        SELECT
        g.id,
        g.student_id,
        s.name AS studentName,         <!-- 映射到 Grade.studentName -->
        g.course_id,
        c.course_name AS courseName,   <!-- 映射到 Grade.courseName -->
        c.credits,
        g.usual_score AS usualScore,
        g.final_score AS finalScore,
        g.total_score AS totalScore,
        g.year,
        g.semester,
        g.graded_by AS gradedBy,
        t.name AS teacherName,         <!-- 映射到 Grade.teacherName -->
        g.create_time AS createTime,
        g.update_time AS updateTime
        FROM grade g
        LEFT JOIN student s ON g.student_id = s.id
        LEFT JOIN course c ON g.course_id = c.id
        LEFT JOIN teacher t ON g.graded_by = t.id   <!-- 修复：g.graded_by → t.id -->
        WHERE g.student_id = #{studentid}          <!-- 参数名必须与 Service 一致 -->
        ORDER BY g.year DESC, g.semester DESC, c.course_name
    </select>
    <select id="getcourselist" resultType="com.ruoyi.ssry.domain.Grade">
        SELECT
        g.id,
        g.student_id,
        s.name AS studentName,
        g.course_id,
        c.course_name AS courseName,
        c.course_code AS courseCode,  <!-- 映射到 Grade.courseCode -->
        c.credits,
        g.usual_score AS usualScore,
        g.final_score AS finalScore,
        g.total_score AS totalScore,
        g.year,
        g.semester,
        g.graded_by AS gradedBy,
        t.name AS teacherName,
        g.create_time AS createTime,
        g.update_time AS updateTime
        FROM grade g
        LEFT JOIN student s ON g.student_id = s.id
        LEFT JOIN course c ON g.course_id = c.id
        LEFT JOIN teacher t ON g.graded_by = t.id
        WHERE g.course_id = #{courseId}
        ORDER BY g.year DESC, g.semester DESC, c.course_name
    </select>

    <resultMap type="Grade" id="GradeResult">
        <id property="id" column="id"/>
        <result property="studentName" column="student_name"/>
        <result property="usualScore" column="usual_score"/>
        <result property="finalScore" column="final_score"/>
        <result property="totalScore" column="total_score"/>
        <result property="semester" column="semester"/>
        <result property="year" column="year"/>
        <result property="courseName" column="course_name"/>
        <result property="courseId" column="course_id"/>
    </resultMap>

    <sql id="selectGradeVo">
        SELECT id, student_id, course_id, usual_score, final_score, total_score, semester, year, graded_by, create_time, update_time
        FROM grade
    </sql>

    <select id="selectGradeList" resultMap="GradeResult">
        <include refid="selectGradeVo"/>
        <where>
            <if test="courseId != null">AND course_id = #{courseId}</if>
        </where>
    </select>

    <select id="selectGradeById" parameterType="Long" resultMap="GradeResult">
        SELECT
            g.id,
            g.student_id,
            s.name AS studentName,
            g.course_id,
            c.course_name AS courseName,
            c.credits,
            g.usual_score AS usualScore,
            g.final_score AS finalScore,
            g.total_score AS totalScore,
            g.year,
            g.semester,
            g.graded_by AS gradedBy,
            t.name AS teacherName,
            g.create_time AS createTime,
            g.update_time AS updateTime
        FROM grade g
                 LEFT JOIN student s ON g.student_id = s.id
                 LEFT JOIN course c ON g.course_id = c.id
                 LEFT JOIN teacher t ON g.graded_by = t.id
        WHERE g.id = #{id}
    </select>

    <update id="updateGrade" parameterType="Grade">
        UPDATE grade
        <set>
            <if test="usualScore != null">usual_score = #{usualScore},</if>
            <if test="finalScore != null">final_score = #{finalScore},</if>
            <if test="totalScore != null">total_score = #{totalScore},</if>
            <if test="semester != null">semester = #{semester},</if>
            <if test="year != null">year = #{year},</if>
            <if test="gradedBy != null">graded_by = #{gradedBy},</if>
        </set>
        WHERE id = #{id}
    </update>

    <select id="selectRangeByCourseId" resultType="java.lang.Integer">
        select count(1)
        from grade
        where course_id = #{courseId}
          and grade.total_score &lt; #{to}
          and grade.total_score >= #{from}
    </select>
    <select id="selectAvgByCourseId" resultType="java.lang.Float">
        SELECT AVG(grade.total_score)
        FROM grade
        WHERE grade.graded_by = #{teacherId}
    </select>
    <select id="getcourseyear" resultType="java.lang.String">
        SELECT grade.year
        FROM grade
        WHERE grade.course_id = #{courseId}
        AND grade.graded_by = #{teacherId}
    </select>
    <select id="getcourseyearavg" resultType="java.lang.Float">
        SELECT AVG(grade.total_score)
        FROM grade
        WHERE grade.course_id = #{courseId}
        AND grade.graded_by = #{teacherId}
    </select>
    <select id="selectYearlyAvgByCourseAndTeacher" resultType="map">
        SELECT
            grade.year AS year,
            AVG(grade.total_score) AS avgScore
        FROM grade
        WHERE grade.course_id = #{courseId}
          AND grade.graded_by = #{teacherId}
        GROUP BY grade.year
        ORDER BY grade.year
    </select>
</mapper>